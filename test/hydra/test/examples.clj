(ns hydra.test.examples
  (:require [hydra.defclass :refer :all]
            [hydra.defclass.utils :as u]))

;TODO fix project setup

(defclass TestFinalClass [])
(defclass ^:nonfinal TestNonFinalClass [])

(definterface ITypedFields
  (getAlpha [])
  (^String getBeta [])
  (^java.util.List getGamma [])
  (^java.util.HashMap getDelta [])
  (^int getEpsilon[])
  (^ints getTheta [])
  (^{:tag "[Ljava.lang.String;"} getIota [])
  (^{:tag "[[[Ljava.lang.Long;"} getZeta [])
  (^void setAlpha [x])
  (^void setBeta [^String x])
  (^void setGamma [^java.util.List x])
  (^void setDelta [^java.util.HashMap x])
  (^void setEpsilon [^int x])
  (^void setTheta [^ints x])
  (^void setIota [^{:tag "[Ljava.lang.String;"} x])
  (^void setZeta [^{:tag "[[[Ljava.lang.Long;"} x]))

(defclass TestTypedFields [^:mutable alpha
                           ^:mutable ^String beta
                           ^:mutable ^java.util.List gamma
                           ^:mutable ^java.util.HashMap delta
                           ^:mutable ^int epsilon
                           ^:mutable ^ints theta
                           ^:mutable ^{:array 1} ^String iota
                           ^:mutable ^{:array 3} ^Long zeta]
  ITypedFields
  (getAlpha [this] alpha)
  (getBeta [this] beta)
  (getGamma [this] gamma)
  (getDelta [this] delta)
  (getEpsilon [this] epsilon)
  (getTheta [this] theta)
  (getIota [this] iota)
  (getZeta [this] zeta)
  (setAlpha [this x] (set! alpha x))
  (setBeta [this x] (set! beta x))
  (setGamma [this x] (set! gamma x))
  (setDelta [this x] (set! delta x))
  (setEpsilon [this x] (set! epsilon x))
  (setTheta [this x] (set! theta x))
  (setIota [this x] (set! iota x))
  (setZeta [this x] (set! zeta x)))

(defclass TestDeclaredMethods [alpha
                               ^:mutable ^String beta
                               ^:mutable ^int gamma]
  (^:declares getAlpha [this] alpha)
  (^:declares ^String getBeta [this] beta)
  (^:declares ^void setBeta [this ^String x] (set! beta x))
  (^:declares ^int getGamma [this] gamma)
  (^:declares ^void setGamma [this ^int x] (set! gamma x)))

(defclass ^:abstract ^:nonfinal TestAbstractClass []
  (^:declares ^:abstract foo1 [this]))

(defclass ^:protected TestProtectedClass [])
(defclass ^:public TestPublicClass [^:public ^:mutable alpha
                                    ^:private beta
                                    ^:protected gamma
                                    delta]
  (^:declares ^:public foo1 [this] nil)
  (^:declares ^:private foo2 [this] nil)
  (^:declares ^:protected foo3 [this] nil))

(defclass TestStaticsClass [alpha
                            ^:static ^:mutable ^String beta
                            ^:static ^:mutable ^int gamma]
  (^:declares getAlpha [this] alpha)
  (^:declares getBetaFromInstance [this] beta)
  (^:declares setBetaFromInstance [this x] (set! beta x))
  (^:declares ^:static getBeta [] beta)
  (^:declares ^:static setBeta [^String x] (set! beta x))
  (^:declares ^:static getGamma [] gamma)
  (^:declares ^:static setGamma [^int x] (set! gamma x)))

;tutaj fooA -> fooB -> fooA jest ok
(defclass ^:nonfinal ParentClass [^String alpha ^Long beta]
  (^:init ParentClass [this])
  (^:init ParentClass [this alpha beta])  ;autogenerated, will set alpha and beta
  (^:init ParentClass [this ^String a] (set! alpha a))
  (^:init ParentClass [this ^Long b] (set! beta b))
  (^:declares fooBar [this] (println "Parent"))
  (^:declares barA [this] (.barB this))
  (^:declares barB [this] (.barA this))
  (^:declares ^:static ^{:array 1} ^ParentClass barC [c] nil))

(definterface IA
  (getA []))

(definterface IB
  (getB [])
  (setB [x]))

(defclass A []
  IA
  (getA [this] (A.)))

(deftype B [^:unsychronized-mutable b]
  IB
  (getB [this] b)
  (setB [this x] (set! (.b this) x)))

(defclass C [^:mutable b]
  IB
  (getB [this] b)
  (setB [this x] (set! (.b this) x)))

(defclass ChildClass [^:public ^String gamma ^ChildClass iota]
  ParentClass
  (^:init ChildClass [this ^String a] (super! ^String a ^Long (long (count a))) (set! gamma a))
  (^:init ChildClass [this ^String a ^Long b ^String c] (super! ^Long b) (set! (.gamma this) c))
  (^:init ^:protected ChildClass [this] (println "Protected ctor"))
  (^:init ^:protected ChildClass [this a b] (this!))
  (^:init ChildClass [this ^ChildClass i] (set! iota i))
  (^:init ChildClass [this ^{:array 2} ^ChildClass i] (super!))
  (fooBar [this] (println "Child"))
  (^:declares fooA [this] (.fooB this))
  (^:declares fooB [this] (.fooA this))
  (^:declares fooC [this s] (str s "!"))
  (^:declares fooD [this c] (set! (.gamma this) c))
  (^:declares ^:static ^ChildClass getInstance [] (ChildClass.))
  (^:declares ^:static ^ChildClass getInstance [^ChildClass c] c)
  (^:declares ^:static ^{:array 1} ^ChildClass getInstance [^{:array 1} ^ChildClass c] c)
  (^:declares ^:static ^{:array 1} ^String getInstance [^{:array 1} ^String c] c))
